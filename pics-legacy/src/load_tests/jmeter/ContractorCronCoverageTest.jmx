<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Contractor Cron Coverage Run" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">uniTCap4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Localhost Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT_WITH_COLON" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT_WITH_COLON</stringProp>
            <stringProp name="Argument.value">%3A8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Alpha Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_HOST</stringProp>
            <stringProp name="Argument.value">alpha.picsorganizer.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT_WITH_COLON" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT_WITH_COLON</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="QA-Beta Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_HOST</stringProp>
            <stringProp name="Argument.value">qa-beta.picsorganizer.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT_WITH_COLON" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT_WITH_COLON</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="LOIT Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_HOST</stringProp>
            <stringProp name="Argument.value">loit.picsorganizer.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SERVER_PORT_WITH_COLON" elementType="Argument">
            <stringProp name="Argument.name">TEST_SERVER_PORT_WITH_COLON</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${TEST_SERVER_HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${TEST_SERVER_PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${TEST_SERVER_PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">Java</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:20.0) Gecko/20100101 Firefox/20.0</stringProp>
          </elementProp>
          <elementProp name="Referer" elementType="Header">
            <stringProp name="Header.name">Referer</stringProp>
            <stringProp name="Header.value">http://localhost:8080/ProfileEdit.action</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">PICS_ALPHA1</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://ajiva.local:3306/pics_alpha</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">pics</stringProp>
        <stringProp name="password">8arTyRev</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Contractor Cron" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1366292756000</longProp>
        <longProp name="ThreadGroup.end_time">1366292756000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Login.action" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/Login.action</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Login.action" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">AETestv7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Login</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/Login.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Rest Smoketest tags and tag from CSV File" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Tag ID" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select id from operator_tag where tag = &apos;SmokeTestContractor&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">TAG_ID</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reset SmokeTest tags" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">delete from contractor_tag where tagID = ${TAG_ID_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Tag Contractors from CSV File" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <intProp name="LoopController.loops">-1</intProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">ContractorCronCoverageContractorIDs.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">CONTRACTOR_ID,CONTRACTOR_NAME</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Tag Contractors from CSV" enabled="true">
              <stringProp name="dataSource">PICS_ALPHA1</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">insert into contractor_tag (conID, tagID) values (${CONTRACTOR_ID}, ${TAG_ID_1})</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Use Smoketest tagged contractors" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Toggle state to restore at end of test" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select feature_enabled from togglz where feature_name = &apos;USE_NEW_FLAGCALCULATOR&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">TOGGLE_STATE</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Toggle Off New FlagCalculator" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">replace into togglz (feature_name, feature_enabled) values (&apos;USE_NEW_FLAGCALCULATOR&apos;, 0)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Smoketest Contractor IDs" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.id from accounts a join contractor_tag ct on ct.conID = a.id join operator_tag ot on ot.id = ct.tagID where ot.tag = &apos;SmokeTestContractor&apos; limit 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">SMOKETEST_CONTRACTOR_ID</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Run Flags on Smoketest Contractors" enabled="true">
            <stringProp name="ForeachController.inputVal">SMOKETEST_CONTRACTOR_ID</stringProp>
            <stringProp name="ForeachController.returnVal">CONTRACTOR_ID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ContractorCron.action" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="conID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CONTRACTOR_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">conID</stringProp>
                  </elementProp>
                  <elementProp name="steps" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ContractorETL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">steps</stringProp>
                  </elementProp>
                  <elementProp name="steps" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Flag</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">steps</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ContractorCron.action</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-721233257">Completed [0-9]* step\(s\) for .*\(${CONTRACTOR_ID}\) successfully</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Flags After First Run" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select flag, baselineFlag from contractor_operator where conID in (${SMOKETEST_CONTRACTOR_IDS}) order by conID, opID</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">FIRSTRUN_FLAGS</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int i = 1;
int numSmokeTestContractors = Integer.parseInt(vars.get(&quot;SMOKETEST_CONTRACTOR_ID_#&quot;));
StringBuffer concatIDs = new StringBuffer();
while (i &lt;= numSmokeTestContractors) {
  concatIDs.append(vars.get(&quot;SMOKETEST_CONTRACTOR_ID_&quot;+i));
  if ((numSmokeTestContractors - i) &gt; 0) { concatIDs.append(&quot;,&quot;); }
  i++;
}
vars.put(&quot;SMOKETEST_CONTRACTOR_IDS&quot;, concatIDs.toString());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Toggle on new FlagCalculator" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">replace into togglz (feature_name, feature_enabled) values (&apos;USE_NEW_FLAGCALCULATOR&apos;, 1)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Run New Flags on Smoketest Contractors" enabled="true">
            <stringProp name="ForeachController.inputVal">SMOKETEST_CONTRACTOR_ID</stringProp>
            <stringProp name="ForeachController.returnVal">CONTRACTOR_ID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ContractorCron.action" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="conID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CONTRACTOR_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">conID</stringProp>
                  </elementProp>
                  <elementProp name="steps" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ContractorETL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">steps</stringProp>
                  </elementProp>
                  <elementProp name="steps" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Flag</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">steps</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ContractorCron.action</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-721233257">Completed [0-9]* step\(s\) for .*\(${CONTRACTOR_ID}\) successfully</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Restore toggle state" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">replace into togglz (feature_name, feature_enabled) values (&apos;USE_NEW_FLAGCALCULATOR&apos;, ?)</stringProp>
            <stringProp name="queryArguments">${TOGGLE_STATE_1}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Flags After Second Run" enabled="true">
            <stringProp name="dataSource">PICS_ALPHA1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select flag, baselineFlag from contractor_operator where conID in (${SMOKETEST_CONTRACTOR_IDS}) order by conID, opID</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">SECONDRUN_FLAGS</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">Failure = false;
first = vars.getObject(&quot;FIRSTRUN_FLAGS&quot;);
second = vars.getObject(&quot;SECONDRUN_FLAGS&quot;);

for(int i = 0; i &lt; first.size(); i++) {
	flagBefore = first.get(i).get(&quot;flag&quot;);
	flagAfter = second.get(i).get(&quot;flag&quot;);
	baseLineFlagBefore = first.get(i).get(&quot;baselineFlag&quot;);
	baseLineFlagAfter = second.get(i).get(&quot;baselineFlag&quot;);
	log.info(&quot;flagBefore is &quot; + flagBefore);
	log.info(&quot;flagAfter is &quot; + flagAfter);
	if ((flagBefore == null &amp;&amp; flagAfter != null) || (flagBefore != null &amp;&amp; !flagBefore.equals(flagAfter))) {
		Failure = true;
		FailureMessage = &quot;flag colors have changed&quot;;
		break;
	}
	log.info(&quot;baseLineFlagBefore is &quot; + baseLineFlagBefore);
	log.info(&quot;baseLineFlagAfter is &quot; + baseLineFlagAfter);
	if ((baseLineFlagBefore == null &amp;&amp; baseLineFlagAfter != null) || (baseLineFlagBefore != null &amp;&amp; !baseLineFlagBefore.equals(baseLineFlagAfter))) {
		Failure = true;
		FailureMessage = &quot;baseline flag colors have changed&quot;;
		break;
	}

}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
