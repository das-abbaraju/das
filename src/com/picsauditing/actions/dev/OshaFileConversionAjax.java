package com.picsauditing.actions.dev;

import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.picsauditing.PICS.DBBean;
import com.picsauditing.actions.PicsActionSupport;
import com.picsauditing.util.FileUtils;

public class OshaFileConversionAjax extends PicsActionSupport {

	private static final String SCRIPT_FILE_NAME = "c:\\temp\\osha_file_mover.sh";
	private static final String BASE_FOLDER = "/var/pics/www_files/files";
	// private static final String BASE_FOLDER = "~/oshatest";

	private static final long serialVersionUID = 753348519512350112L;
	private final Logger logger = LoggerFactory.getLogger(OshaFileConversionAjax.class);
	@Override
	public String execute() throws Exception {
		String sql = "select oa.id,pd.id from osha_audit oa\n" 
	+ " join contractor_audit ca on oa.auditID = ca.id\n"
	+ " join pqfData pd on ca.id = pd.auditID and pd.questionID = 8811"
	+ " where oa.id in (249,782,241,69,114,111,119,220,1703,282,2608,824,1128,2902,1512,1085,1144,1231,1467,1365,2341,1373,1875,1798,1929,2391,2022,2050,2221,2270,2255,2416,2739,2505,2659,3970,3001,3302,3472,3679,38071,17399,544,1395,2655,2662,2931,32620,19281,3386,24291,1239,1167,4266,4799,4258,4131,4136,5720,4299,4651,4870,5102,5161,5248,5484,5382,6358,5390,5892,5815,5946,6408,6039,6067,6238,6433,6756,6522,6676,7987,7018,7319,7489,7696,17382,5503,5263,5712,6948,20017,24313,5256,5184,8283,8816,8183,8275,8153,8316,8668,8754,8887,9119,9178,9265,9501,9399,10375,9909,9832,9963,10425,10084,10255,10928,10450,10773,10539,10693,11035,11336,11506,11713,8262,9520,9280,9729,11719,9273,9201,12162,12196,12282,12333,12819,12890,13113,13171,13194,13266,13481,13500,13690,14162,14309,14343,14425,14477,14950,15018,15235,16591,18313,16620,18777,16108,16559,15935,16453,16296,16988,24314,15963,18266,16141,18955,15887,18702,16382,16629,16048,16530,18640,50170,16189,28108,17538,18879,25720,16917,16903,17321,48462,17187,19860,18159,17396,17404,17612,16897,16896,16894,18751,17827,18768,18770,18772,19131,22534,19429,17327,20676,23228,18540,18515,17625,18748,19330,19092,18247,17932,20280,18464,19284,19153,17990,19368,18487,18618,18513,32631,18976,21221,23954,23956,23960,38097,19501,21447,19207,20524,20154,20310,20314,19711,19642,19698,20042,19848,23298,23296,24946,21248,24970,21587,21849,22118,22119,22121,22122,23916,24387,22924,22927,23427,23130,23133,24182,24692,28639,28638,23901,24358,24357,25311,25316,24726,24740,24742,24799,24798,24796,25210,25232,25233,25615,25616,28325,26653,26806,26590,27492,32235,27853,26120,28609,35313,28616,31149,27701,28048,26563,31553,27055,27537,29134,26665,28501,50344,26613,27089,26664,32778,27795,28706,36113,27717,31845,35732,29119,31993,48486,29058,27845,25959,32374,31321,30398,27771,30827,30016,30810,28796,30523,26767,28347,27730,28078,29106,28090,30167,29672,32821,26867,27958,26084,29925,26323,39052,25776,31741,29756,32466,25780,48880,27383,28646,30596,31044,26279,28534,27983,50164,30716,30375,30370,32457,34660,32612,32618,31815,31848,31857,32180,32450,32455,34503,34363,32694,32722,32643,33061,33219,32928,32936,32938,33309,33314,33321,33268,33374,33376,33512,35218,35219,34270,33901,39701,45762,34566,34570,34893,34904,34902,34560,36162,36379,36378,35859,35862,35860,36823,36582,36590,36588,36648,36654,48999,37355,37182,37927,37929,37651,37681,38093,37778,37781,37784,38611,38602,43419,40486,48892,49575,41303,45972,46025,46593,47268,84185,45647,41061,43519,43603,47767,41339,43176,46785,41054,43196,42653,49208,53849,40604,46287,41186,43752,41121,46408,49224,41279,49784,45838,43278,47238,41963,42534,41856,43077,40735,47794,45643,42468,43404,40764,43745,86254,48653,40321,44160,45948,45331,45251,46631,46894,47905,41916,53045,45636,45757,45269,43586,44109,45909,45234,42183,51515,41878,45017,49282,44832,46339,44873,50275,47021,48560,46528,92531,45991,46058,46062,105608,51331,44870,61773,48955,48898,48882,45423,51168,47117,47104,47088,50162,49325,53560,51791,50183,50180,50145,55559,55681,55682,51106,52245,52247,50653,50573,51552,50810,50808,51303,53156,53189,51968,55323,52161,73545,80706,80755,57018,55328,55317,83392,57672,57742,57729,93619,56087,95584,95586,56232,56928,56927,56554,56555,56557,56826,65312,58190,94147,61405,61404,61403,80457,80459,80464,88169,88171,83561,63727,66005,74477,68898,92533,69259,66563," 
	+ "82013,100953,64947,80739,66348,83074,80887,71849,97006,68484,83356,79317,69084,106468,72227,97802,71328,64412,72564,101095,97834,65576,95455,98575,97066,74038,96120,71596,83109,72171,80758,65722,67629,97814,71790,70671,73874,69539,64447,68004,83396,82171,86415,101887,73811,73406,92904,96580,81007,66389,89888,78398,78627,73471,85580,83191,74613,93627,72597,72183,104134,70779,80169,66911,97391,66349,74104,105873,77718,82525,79058,95590,82670,92619,70350,98139,70993,92609,79256,78964,84187,66705,65996,82774,101543,89478,66131,97441,64688,79369,70418,71580,99128,82868,92152,78428,102358,67600,79918,70437,97543,83177,64866,106422,89474,80931,99000,95573,79214,73527,88175,105168,97417,78268,93489,96190,89631,80501,96927,82498,72189,71306,64955,73555,97617,93741,76097,74047,82863,74192,89020,80867,80898,93653,90438,81032,85822,103481,102144,91945,68323,79543,87638,67799,91767,83567,93409,70654,80292,86467,98469,79860,80513,96630,70095,72271,86256,64409,81582,92694,92696,68945,69722,69731,98374,98376,67964,68751,68725,68726,69012,82173,74127,86058,86060,70424,71956,70421,90508,90510,90512,72025,72036,72716,80247,93249,75176,101116,82009,85039,80591,80615,80614,79770,92477,99808,99810,99812,80830,80911,81566,81565,94068,87099,86523,86525,86527,103107,103109,103111,82135,82145,97124,98213,106339,106564)";

		// SelectSQL selectSQL = new SelectSQL("app_translation");
		// selectSQL.addField("msgKey");
		// selectSQL.addField("msgValue");
		// selectSQL.addWhere(buildWhereClause());

		Connection conn = DBBean.getDBConnection();
		logger.debug("Running SQL = {}", sql);
		ResultSet results = conn.createStatement().executeQuery(sql);

		logger.debug("Calling populatePairings()");
		Map<Integer, Integer> pairings = populatePairings(results);
		logger.debug("Pairings found = {}", pairings.size());
		String scriptTemplate = "\r\n# osha_${fromID} -> data_${toID}\r\n" +
				"files=`ls "+BASE_FOLDER+"/${sourceHashFolder}osha_${fromID}.*`\r\n" + 
				"for i in $files; do \r\n" + 
				"	ext=`echo $i|awk -F . '{print $NF}'`\r\n" + 
				"	echo 'update pqfdata set answer = \"'${ext}'\" where id = ${toID};' >> pics-3156.sql\r\n" +
				"	mkdir -p "+BASE_FOLDER+"/${destinationHashFolder}\r\n" + 
				"	mv -f $i "+BASE_FOLDER+"/${destinationHashFolder}data_${toID}.${ext}\r\n" + 
				"done\r\n";
		logger.debug("Generating script");
		String script = FileUtils.massManipulateScript(pairings, scriptTemplate);
		logger.debug("Saving script");
		FileWriter fw = new FileWriter(new File(SCRIPT_FILE_NAME));
		fw.write("echo '-- Update Script for PICS-3156 (OSHA Rewrite)' > pics-3156.sql");
		fw.write(script);
		fw.close();
		this.json.put("filename", SCRIPT_FILE_NAME);
		this.json.put("count", pairings.size());
		return JSON;

	}

	@SuppressWarnings("unchecked")
	private Map<Integer, Integer> populatePairings(ResultSet results) throws Exception {
		Map<Integer, Integer> pairings = new HashMap<Integer, Integer>();
		while (results.next()) {
			pairings.put(results.getInt(1), results.getInt(2));
		}
		return pairings;
	}
}
