package com.picsauditing.salecommission.strategy.invoice;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.collections.Predicate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.picsauditing.PICS.BillingCalculatorSingle;
import com.picsauditing.dao.ContractorAccountDAO;
import com.picsauditing.jpa.entities.AccountUser;
import com.picsauditing.jpa.entities.ContractorAccount;
import com.picsauditing.jpa.entities.ContractorOperator;
import com.picsauditing.jpa.entities.Invoice;
import com.picsauditing.jpa.entities.User;

/**
 * This class contains all the logic for calculating the revenue generated by each Client Site that
 * should be split by the Sales Representative/Account Manager.
 */
public abstract class AbstractInvoiceCommissionStrategy implements InvoiceCommissionStrategy<Invoice> {

	@Autowired
	protected ContractorAccountDAO contractorAccountDAO;
	@Autowired
	protected BillingCalculatorSingle billingService;

	public void processInvoiceCommission(Invoice invoice) {
		if (hasStrategyAlreadyProcessed(invoice)) {
			return;
		}

		buildInvoiceCommissions(invoice);
	}

	protected abstract boolean hasStrategyAlreadyProcessed(Invoice invoice);

	protected abstract void buildInvoiceCommissions(Invoice invoice);

//	protected List<ContractorOperator> getListOfAllOperatorSites(ContractorAccount contractor) {
//		if (CollectionUtils.isEmpty(contractor.getNonCorporateOperators())) {
//			return Collections.emptyList();
//		}
//
//		List<ContractorOperator> clientSites = new ArrayList<ContractorOperator>();
//		for (ContractorOperator clientSite : contractor.getNonCorporateOperators()) {
//			String doContractorsPay = clientSite.getOperatorAccount().getDoContractorsPay();
//			if ("Yes".equals(doContractorsPay) || !"Multiple".equals(doContractorsPay)) {
//				clientSites.add(clientSite);
//			}
//		}
//
//		return clientSites;
//	}

}