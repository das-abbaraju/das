<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="test method for a Spring-injected class (with instructions for adding the nec. support)" enabled="true" name="testSpring">@Test&#13;
public void testAction_Execute() throws Exception {&#13;
	// 1. Move the following imports to the top of the file&#13;
import org.junit.Test;&#13;
import org.junit.runner.RunWith;&#13;
import org.springframework.test.context.ContextConfiguration;&#13;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#13;
import org.springframework.test.context.transaction.TransactionConfiguration;&#13;
import static com.picsauditing.util.Assert.*; // In case you want to use assertContains() or assertEqualsToTheSecond()&#13;
import static org.junit.Assert.*;&#13;
import com.opensymphony.xwork2.Action;&#13;
import com.picsauditing.EntityFactory;&#13;
import com.picsauditing.access.Permissions;&#13;
import com.picsauditing.jpa.entities.User;&#13;
	// 2. Annotate the test class as follows:&#13;
@RunWith(SpringJUnit4ClassRunner.class)&#13;
@ContextConfiguration(locations= {"/tests.xml"})&#13;
@TransactionConfiguration(transactionManager = "transactionManager")&#13;
	// 3. Create a private field called action and instantiate it in a @Before setUp() method:&#13;
	private ${MyActionClass} action;&#13;
	@Before public void setUp() throws Exception {&#13;
		action = new ${MyActionClass}();&#13;
	}&#13;
	// 4. Move the next two lines to the top of the class (or delete them if not needed)&#13;
	private User user;&#13;
	private Permissions permissions;&#13;
	// 5. Extract the next two lines to a method (Alt-Shift-M) called setUpBasicModelObjects()&#13;
	user = EntityFactory.makeUser();&#13;
	permissions = EntityFactory.makePermission(user);&#13;
	// 6. Examples of some simple things you can do with actions...&#13;
	assertEquals(Action.SUCCESS, action.execute());&#13;
	assertEquals("expected",action.getJsonArray().toString());&#13;
	assertEquals("expected",action.getJson().toString());&#13;
	assertContains("expectedSubstring",action.getJsonArray().toString());&#13;
}</template></templates>