<!DOCTYPE validators PUBLIC "-//OpenSymphony Group//XWork Validator 1.0.2//EN"
        "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd">

<validators>

	<!-- This should be kept in sync with the "name" validation in User-validation.xml -->
    <field name="u.name">
        <field-validator type="requiredstring" short-circuit="true">
            <message>${getText("JS.Validation.Required")}</message>
        </field-validator>
        <field-validator type="stringlength" short-circuit="true">
            <param name="maxLength">100</param>
            <param name="trim">true</param>
            <message>${getText("JS.Validation.Maximum100Characters")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.name)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
    </field>

    <field name="u.department">
        <field-validator type="requiredstring" short-circuit="true">
            <message>${getText("JS.Validation.Required")}</message>
        </field-validator>
        <field-validator type="stringlength" short-circuit="true">
            <param name="maxLength">100</param>
            <param name="trim">true</param>
            <message>${getText("JS.Validation.Maximum100Characters")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.department)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
    </field>

	<!-- This should be kept in sync with the "email" validation in User-validation.xml -->
    <field name="u.email">
        <field-validator type="requiredstring" short-circuit="true">
            <message>${getText("JS.Validation.Required")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.email)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
        <field-validator type="email" short-circuit="true">
            <message>${getText("JS.Validation.ValidEmail")}</message>
        </field-validator>
        <field-validator type="stringlength" short-circuit="true">
            <param name="maxLength">100</param>
            <param name="trim">true</param>
            <message>${getText("JS.Validation.Maximum100Characters")}</message>
        </field-validator>
    </field>

	<!-- This should be kept in sync with the "username" validation in User-validation.xml -->
    <field name="u.username">
        <field-validator type="requiredstring" short-circuit="true">
            <message>${getText("JS.Validation.Required")}</message>
        </field-validator>
        <field-validator type="stringlength" short-circuit="true">
            <param name="maxLength">100</param>
            <message>${getText("JS.Validation.Maximum100Characters")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.username)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[isUsernameValid(u.username)]]></param>
            <message>${getText("JS.Validation.UsernameInvalid")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[isUsernameNotTakenOrUnchanged(u.username)]]></param>
            <message>${getText("JS.Validation.UsernameIsTaken")}</message>
        </field-validator>
    </field>

	<!-- This should be kept in sync with the "phone" validation in User-validation.xml -->
    <field name="u.phone">
        <field-validator type="requiredstring" short-circuit="true">
            <message>${getText("JS.Validation.Required")}</message>
        </field-validator>
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.phone)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
        <field-validator type="regex" short-circuit="true">
            <!--
                   Allow NANP phones with leadings 1s and potential x1234 extensions as
                   well as international formatted phone numbers. Modified from
                   http://blog.stevenlevithan.com/archives/validate-phone-number and
                   shown in the Regular Expressions Cookbook (O'Reilly, 2009)
               -->
            <param name="expression">
                <![CDATA[^(\+?(?:\(?[0-9]\)?[-. ]{0,2}){9,14}[0-9])((\s){0,4}((?i)x|(?i)ext)(\s){0,4}[\d]{1,5})?$]]></param>
            <message>${getText("JS.Validation.InvalidPhoneFormat")}</message>
        </field-validator>
    </field>

    <field name="u.fax">
        <field-validator type="fieldexpression" short-circuit="true">
            <param name="expression"><![CDATA[containsOnlySafeCharacters(u.fax)]]></param>
            <message>${getText("JS.Validation.SpecialCharacters")}</message>
        </field-validator>
        <field-validator type="regex" short-circuit="true">
            <!--
                   Allow NANP phones with leadings 1s and potential x1234 extensions as
                   well as international formatted phone numbers. Modified from
                   http://blog.stevenlevithan.com/archives/validate-phone-number and
                   shown in the Regular Expressions Cookbook (O'Reilly, 2009)
               -->
            <param name="expression">
                <![CDATA[^(\+?(?:\(?[0-9]\)?[-. ]{0,2}){9,14}[0-9])((\s){0,4}((?i)x|(?i)ext)(\s){0,4}[\d]{1,5})?$]]></param>
            <message>${getText("JS.Validation.InvalidPhoneFormat")}</message>
        </field-validator>
    </field>

</validators>
